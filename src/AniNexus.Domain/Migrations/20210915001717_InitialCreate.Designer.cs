// <auto-generated />
using System;
using AniNexus.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AniNexus.Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210915001717_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.7.21378.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeAgeRatingTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the AnimeAgeRating enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AnimeAgeRating", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Everyone"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Youth"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Teen"
                        },
                        new
                        {
                            Id = 4,
                            Name = "OlderTeen"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mature"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Adult"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeCategoryTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the AnimeCategory enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AnimeCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TV"
                        },
                        new
                        {
                            Id = 2,
                            Name = "OVA"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ONA"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Movie"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Special"
                        },
                        new
                        {
                            Id = 6,
                            Name = "LiveAction"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeCharacterMapModel", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AnimeId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RoleId");

                    b.ToTable("AnimeCharacterMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeEpisodeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time")
                        .HasComment("The length of the episode.");

                    b.Property<string>("EnglishEpisodeName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The name of the episode in English if the name is not already in English.")
                        .IsSparse();

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int")
                        .HasComment("The episode number in the release.");

                    b.Property<bool>("IsEpisodeNumberPoint5")
                        .HasColumnType("bit")
                        .HasComment("Whether the episode is a \".5\" episode.");

                    b.Property<bool>("IsSpoiler")
                        .HasColumnType("bit");

                    b.Property<string>("NativeEpisodeName")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The native name of the episode.")
                        .UseCollation("Japanese_CI_AS_KS_WS")
                        .IsSparse();

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("date")
                        .HasComment("The date this episode aired.");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("int");

                    b.Property<string>("RomajiEpisodeName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("The romanization of the native name if the name is not already in English.")
                        .IsSparse();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Synopsis")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The episode synopsis.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<string>("WatchUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("A URL to a place where the user can legally watch the episode.");

                    b.HasKey("Id");

                    b.HasIndex("ReleaseDate")
                        .HasFilter("[ReleaseDate] IS NOT NULL");

                    b.HasIndex("ReleaseId");

                    b.HasIndex("ReleaseId", "EpisodeNumber", "IsEpisodeNumberPoint5")
                        .IsUnique();

                    b.ToTable("AnimeEpisode", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeFavoriteMapModel", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnimeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AnimeFavoriteMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeGenreMapModel", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("AnimeId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("AnimeGenreMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeListEntryModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Comments the user has about the anime.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasComment("The date the user watched the final episode of the anime.");

                    b.Property<int>("EpisodeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("The number of episodes the user has seen.");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint")
                        .HasComment("The rating this user gives the anime, from 0 to 100.");

                    b.Property<int>("RewatchCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("The number of times the user has rewatched the anime.");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasComment("The date the user first started watching the anime.");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AnimeId");

                    b.HasIndex("AnimeId");

                    b.HasIndex("StatusId");

                    b.ToTable("AnimeListEntry", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeListStatusTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the AnimeListStatus enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AnimeListStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PlanToWatch"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Watching"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Complete"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rewatching"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Paused"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dropped"
                        },
                        new
                        {
                            Id = 7,
                            Name = "WillNeverWatch"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("ActiveRating")
                        .HasColumnType("tinyint")
                        .HasComment("The user rating of the anime (Watching Only), from 0 to 100. Calculated by the system periodically.");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint")
                        .HasComment("The user rating of the anime (Completed Only), from 0 to 100. Calculated by the system periodically.");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Synopsis")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("A synopsis or description of the anime.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<int>("Votes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("The number of votes that contributed to the rating. Calculated by the system periodically.");

                    b.Property<string>("WebsiteUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("The URL to the anime's official website.");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("SeasonId")
                        .HasFilter("[SeasonId] IS NOT NULL");

                    b.ToTable("Anime", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimePersonRoleMapModel", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "AnimeId", "RoleId");

                    b.HasIndex("AnimeId");

                    b.HasIndex("RoleId");

                    b.ToTable("AnimePersonRoleMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeRelatedMapModel", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedAnimeId")
                        .HasColumnType("int");

                    b.Property<int>("RelationTypeId")
                        .HasColumnType("int");

                    b.HasKey("AnimeId", "RelatedAnimeId");

                    b.HasIndex("RelatedAnimeId");

                    b.HasIndex("RelationTypeId");

                    b.ToTable("AnimeRelatedMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeReleaseAiringModel", b =>
                {
                    b.Property<int>("ReleaseId")
                        .HasColumnType("int");

                    b.HasKey("ReleaseId");

                    b.ToTable("AnimeReleaseAiring", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeReleaseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgeRatingId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("AirTime")
                        .HasColumnType("time")
                        .HasComment("The UTC time this anime normally airs at.");

                    b.Property<int?>("AirsOnDay")
                        .HasColumnType("int")
                        .HasComment("The day of the week this entry airs on. Only relevant for anime with a regular release.");

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<string>("EndDate")
                        .HasColumnType("char(10)")
                        .HasComment("The air date of the last episode in this locale.");

                    b.Property<short?>("EpisodeCount")
                        .HasColumnType("smallint")
                        .HasComment("The expected number of entries in this release.");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasComment("Whether this is the primary release information for the anime.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<short>("LatestEpisodeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasComment("The actual number of entries in this release.");

                    b.Property<int>("LocaleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("StartDate")
                        .HasColumnType("char(10)")
                        .HasComment("The air date of the first episode in this locale.");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("The URL to a place where the release can be purchased.");

                    b.HasKey("Id");

                    b.HasIndex("AgeRatingId")
                        .HasFilter("[AgeRatingId] IS NOT NULL");

                    b.HasIndex("AnimeId");

                    b.HasIndex("EndDate")
                        .HasFilter("[EndDate] IS NOT NULL");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("LocaleId");

                    b.HasIndex("StartDate")
                        .HasFilter("[StartDate] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.ToTable("AnimeRelease", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeReviewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<bool>("Recommend")
                        .HasColumnType("bit")
                        .HasComment("Whether the user recommends the anime.");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("The review content.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("AnimeReview", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeReviewVoteModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Agrees")
                        .HasColumnType("bit")
                        .HasComment("Whether this user agrees with the review.");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId", "ReviewId")
                        .IsUnique();

                    b.ToTable("AnimeReviewVote", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeSeasonTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the AnimeSeason enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AnimeSeason", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Winter"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Spring"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Summer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fall"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeSystemRecommendationModel", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("AnimeRecommendationId")
                        .HasColumnType("int")
                        .HasColumnName("AnimeRecId");

                    b.Property<byte>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)10)
                        .HasComment("The order in which the recommendation will be listed. Lower order will be listed first.");

                    b.HasKey("AnimeId", "AnimeRecommendationId");

                    b.HasIndex("AnimeRecommendationId");

                    b.ToTable("AnimeSysRec", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeTagMapModel", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("AnimeId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("AnimeTagMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeThirdPartyMapModel", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdPartyId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalMediaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Id that the third party tracker has assigned to the anime entry.");

                    b.HasKey("AnimeId", "ThirdPartyId");

                    b.HasIndex("ThirdPartyId");

                    b.ToTable("AnimeThirdPartyMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeTwitterHashTagMapModel", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("TwitterHashTagId")
                        .HasColumnType("int");

                    b.HasKey("AnimeId", "TwitterHashTagId");

                    b.HasIndex("TwitterHashTagId");

                    b.ToTable("AnimeTwitterHashTagMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeUserRecommendationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("AnimeRecommendationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The reason why this user recommends the anime.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeRecommendationId");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("UserId");

                    b.HasIndex("AnimeId", "UserId");

                    b.ToTable("AnimeUserRec", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeUserRecommendationVoteModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RecommendationId")
                        .HasColumnType("int");

                    b.Property<bool>("Agrees")
                        .HasColumnType("bit")
                        .HasComment("Whether this user agrees with the recommendation.");

                    b.HasKey("UserId", "RecommendationId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("AnimeUserRecVote", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.ApplicationResourceModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The key of the dictionary.");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The value of the dictionary.");

                    b.HasKey("Name");

                    b.ToTable("AppResource", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "ContentHostKey",
                            Value = "https://localhost:5001"
                        },
                        new
                        {
                            Name = "AnimeCoverArtPath",
                            Value = "assets/coverart/anime/{0}.jpg"
                        },
                        new
                        {
                            Name = "MediaSeriesCoverArtPath",
                            Value = "assets/coverart/series/{0}.jpg"
                        },
                        new
                        {
                            Name = "SoundTrackAlbumArtPath",
                            Value = "assets/coverart/ost/{0}.jpg"
                        },
                        new
                        {
                            Name = "CharacterPicturePath",
                            Value = "assets/coverart/character/{0}.jpg"
                        },
                        new
                        {
                            Name = "PersonPicturePath",
                            Value = "assets/coverart/person/{0}.jpg"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.ApplicationUserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AuditModel", b =>
                {
                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The action that was performed on the table.");

                    b.Property<string>("AffectedKeys")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The values of the primary keys that were affected.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("The date that this entry was added.");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The table that was affected.");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("Action");

                    b.HasIndex("Date")
                        .IsClustered();

                    b.HasIndex("Table");

                    b.HasIndex("UserId")
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Audit", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.CharacterRoleTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the CharacterRole enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CharacterRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Main"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Supporting"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.CompanyRoleTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the CompanyRole enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CompanyRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Producer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Studio"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Publisher"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameCategoryTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the GameCategory enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Digital"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VisualNovel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Analog"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameCharacterMapModel", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RoleId");

                    b.ToTable("GameCharacterMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameFavoriteMapModel", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GameFavoriteMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameGenreMapModel", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenreMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameListEntryModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Comments the user has about the game.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasComment("The date the user finished playing the game.");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint")
                        .HasComment("The rating this user gives the game, from 0 to 100.");

                    b.Property<int>("ReplayCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("The number of times the user has replayed the game.");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasComment("The date the user first started playing the game.");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("GameListEntry", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameListStatusTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the GameListStatus enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameListStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PlanToPlay"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Playing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Complete"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Replaying"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Paused"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dropped"
                        },
                        new
                        {
                            Id = 7,
                            Name = "WillNeverPlay"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint")
                        .HasComment("The user rating of the media, from 0 to 100. Calculated by the system periodically.");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("char(10)")
                        .HasComment("The date this game was released.");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Synopsis")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("A synopsis or description of the media.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<int>("Votes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("The number of votes that contributed to the rating. Calculated by the system periodically.");

                    b.Property<string>("WebsiteUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("The URL to the media's official website.");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("ReleaseDate")
                        .HasFilter("[ReleaseDate] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.ToTable("Game", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GamePersonRoleMapModel", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "GameId", "RoleId");

                    b.HasIndex("GameId");

                    b.HasIndex("RoleId");

                    b.ToTable("GamePersonRoleMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameRelatedMapModel", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedGameId")
                        .HasColumnType("int");

                    b.Property<int>("RelationTypeId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "RelatedGameId");

                    b.HasIndex("RelatedGameId");

                    b.HasIndex("RelationTypeId");

                    b.ToTable("GameRelatedMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameReviewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<bool>("Recommend")
                        .HasColumnType("bit")
                        .HasComment("Whether the user recommends the game.");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("The review content.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("GameReview", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameReviewVoteModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Agrees")
                        .HasColumnType("bit")
                        .HasComment("Whether this user agrees with the review.");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId", "ReviewId")
                        .IsUnique();

                    b.ToTable("GameReviewVote", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameSystemRecommendationModel", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GameRecommendationId")
                        .HasColumnType("int")
                        .HasColumnName("GameRecId");

                    b.Property<byte>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)10)
                        .HasComment("The order in which the recommendation will be listed. Lower order will be listed first.");

                    b.HasKey("GameId", "GameRecommendationId");

                    b.HasIndex("GameRecommendationId");

                    b.ToTable("GameSysRec", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameTagMapModel", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("GameTagMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameThirdPartyMapModel", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdPartyId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalMediaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Id that the third party tracker has assigned to the game entry.");

                    b.HasKey("GameId", "ThirdPartyId");

                    b.HasIndex("ThirdPartyId");

                    b.ToTable("GameThirdPartyMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameTwitterHashTagMapModel", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("TwitterHashTagId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "TwitterHashTagId");

                    b.HasIndex("TwitterHashTagId");

                    b.ToTable("GameTwitterHashTagMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameUserRecommendationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GameRecommendationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The reason why this user recommends the game.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameRecommendationId");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("UserId");

                    b.HasIndex("GameId", "UserId");

                    b.ToTable("GameUserRec", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameUserRecommendationVoteModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RecommendationId")
                        .HasColumnType("int");

                    b.Property<bool>("Agrees")
                        .HasColumnType("bit")
                        .HasComment("Whether this user agrees with the recommendation.");

                    b.HasKey("UserId", "RecommendationId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("GameUserRecVote", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.LocaleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nchar(17)")
                        .IsFixedLength()
                        .HasComment("The i18n language code of the locale.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("The name of the locale.");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("LanguageCode")
                        .IsUnique();

                    b.ToTable("Locale", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "ja_JP",
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en_US",
                            Name = "English"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaAgeRatingTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the MangaAgeRating enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MangaAgeRating", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Everyone"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Youth"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Teen"
                        },
                        new
                        {
                            Id = 4,
                            Name = "OlderTeen"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mature"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaCategoryTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the MangaCategory enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MangaCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manga"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "LightNovel"
                        },
                        new
                        {
                            Id = 4,
                            Name = "WebNovel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Doujinshi"
                        },
                        new
                        {
                            Id = 6,
                            Name = "OneShot"
                        },
                        new
                        {
                            Id = 7,
                            Name = "PictureBook"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaChapterModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("int")
                        .HasComment("The chapter number in the release.");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int")
                        .HasComment("The number of pages the chapter has.");

                    b.Property<string>("ReadUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("A URL to a place where the user can legally read the chapter.");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("char(10)")
                        .HasComment("The date this chapter released.");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Synopsis")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The chapter synopsis.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<long?>("VolumeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReleaseId");

                    b.HasIndex("VolumeId")
                        .HasFilter("[VolumeId] IS NOT NULL");

                    b.HasIndex("ReleaseId", "ChapterNumber")
                        .IsUnique();

                    b.ToTable("MangaChapter", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaCharacterMapModel", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("MangaId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RoleId");

                    b.ToTable("MangaCharacterMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaFavoriteMapModel", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MangaId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MangaFavoriteMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaGenreMapModel", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MangaId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MangaGenreMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaListEntryModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("ChapterCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("The number of chapters the user has read.");

                    b.Property<string>("Comment")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Comments the user has about the manga.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasComment("The date the user finished reading the manga.");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint")
                        .HasComment("The rating this user gives the manga, from 0 to 100.");

                    b.Property<int>("RereadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("The number of times the user has reread the manga.");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasComment("The date the user first started reading the manga.");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("VolumeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("The number of volumes the user has read.");

                    b.HasKey("UserId", "MangaId");

                    b.HasIndex("MangaId");

                    b.HasIndex("StatusId");

                    b.ToTable("MangaListEntry", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaListStatusTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the MangaListStatus enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MangaListStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PlanToRead"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Reading"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Complete"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rereading"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Paused"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dropped"
                        },
                        new
                        {
                            Id = 7,
                            Name = "WillNeverRead"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("ActiveRating")
                        .HasColumnType("tinyint")
                        .HasComment("The user rating of the manga (Readonly Only), from 0 to 100. Calculated by the system periodically.");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint")
                        .HasComment("The user rating of the manga (Completed Only), from 0 to 100. Calculated by the system periodically.");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Synopsis")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("A synopsis or description of the manga.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<int>("Votes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("The number of votes that contributed to the rating. Calculated by the system periodically.");

                    b.Property<string>("WebsiteUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("The URL to the manga's official website.");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("Manga", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaPersonRoleMapModel", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.HasIndex("MangaId");

                    b.HasIndex("PersonId");

                    b.ToTable("MangaPersonRoleMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaRelatedMapModel", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedMangaId")
                        .HasColumnType("int");

                    b.Property<int>("RelationTypeId")
                        .HasColumnType("int");

                    b.HasKey("MangaId", "RelatedMangaId");

                    b.HasIndex("RelatedMangaId");

                    b.HasIndex("RelationTypeId");

                    b.ToTable("MangaRelatedMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaReleaseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgeRatingId")
                        .HasColumnType("int");

                    b.Property<short?>("ChapterCount")
                        .HasColumnType("smallint")
                        .HasComment("The expected number of chapters in this release.");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<string>("EndDate")
                        .HasColumnType("char(10)")
                        .HasComment("The air date of the last chapter in this locale.");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasComment("Whether this is the primary release information for the manga.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<short>("LatestChapterCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasComment("The actual number of chapters in this release.");

                    b.Property<short>("LatestVolumeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasComment("The actual number of volumes in this release.");

                    b.Property<int>("LocaleId")
                        .HasColumnType("int");

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("StartDate")
                        .HasColumnType("char(10)")
                        .HasComment("The air date of the first chapter in this locale.");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<short?>("VolumeCount")
                        .HasColumnType("smallint")
                        .HasComment("The expected number of volumes in this release.");

                    b.Property<string>("WebsiteUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("The URL to a place where the release can be purchased.");

                    b.HasKey("Id");

                    b.HasIndex("AgeRatingId");

                    b.HasIndex("EndDate")
                        .HasFilter("[EndDate] IS NOT NULL");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("LocaleId");

                    b.HasIndex("MangaId");

                    b.HasIndex("StartDate")
                        .HasFilter("[StartDate] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.ToTable("MangaRelease", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaReviewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<bool>("Recommend")
                        .HasColumnType("bit")
                        .HasComment("Whether the user recommends the manga.");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("The review content.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("MangaId");

                    b.HasIndex("UserId");

                    b.ToTable("MangaReview", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaReviewVoteModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Agrees")
                        .HasColumnType("bit")
                        .HasComment("Whether this user agrees with the review.");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId", "ReviewId")
                        .IsUnique();

                    b.ToTable("MangaReviewVote", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaSystemRecommendationModel", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("MangaRecommendationId")
                        .HasColumnType("int")
                        .HasColumnName("MangaRecId");

                    b.Property<byte>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)10)
                        .HasComment("The order in which the recommendation will be listed. Lower order will be listed first.");

                    b.HasKey("MangaId", "MangaRecommendationId");

                    b.HasIndex("MangaRecommendationId");

                    b.ToTable("MangaSysRec", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaTagMapModel", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("MangaId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("MangaTagMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaThirdPartyMapModel", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("ThirdPartyId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalMediaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Id that the third party tracker has assigned to the manga entry.");

                    b.HasKey("MangaId", "ThirdPartyId");

                    b.HasIndex("ThirdPartyId");

                    b.ToTable("MangaThirdPartyMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaTwitterHashTagMapModel", b =>
                {
                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("TwitterHashTagId")
                        .HasColumnType("int");

                    b.HasKey("MangaId", "TwitterHashTagId");

                    b.HasIndex("TwitterHashTagId");

                    b.ToTable("MangaTwitterHashTagMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaUserRecommendationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("MangaRecommendationId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The reason why this user recommends the manga.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("MangaRecommendationId");

                    b.HasIndex("UserId");

                    b.HasIndex("MangaId", "UserId");

                    b.ToTable("MangaUserRec", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaUserRecommendationVoteModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RecommendationId")
                        .HasColumnType("int");

                    b.Property<bool>("Agrees")
                        .HasColumnType("bit")
                        .HasComment("Whether this user agrees with the recommendation.");

                    b.HasKey("UserId", "RecommendationId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("MangaUserRecVote", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaVolumeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int")
                        .HasComment("The number of pages the volume has.");

                    b.Property<string>("ReadUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasComment("A URL to a place where the user can legally read the volume.");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("char(10)")
                        .HasComment("The date this volume released.");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Synopsis")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The volume synopsis.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<int>("VolumeNumber")
                        .HasColumnType("int")
                        .HasComment("The volume number in the release.");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("ReleaseId");

                    b.HasIndex("ReleaseId", "VolumeNumber")
                        .IsUnique();

                    b.ToTable("MangaVolume", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCharacterActorMapModel", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("AnimeReleaseId")
                        .HasColumnType("int");

                    b.Property<int>("LocaleId")
                        .HasColumnType("int");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit")
                        .HasComment("Whether this person was the primary actor for this character.");

                    b.HasKey("CharacterId", "PersonId", "AnimeReleaseId", "LocaleId");

                    b.HasIndex("AnimeReleaseId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("LocaleId");

                    b.HasIndex("PersonId");

                    b.ToTable("CharacterActorMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCharacterModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasComment("The age of the character, in months.");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DOB")
                        .HasComment("The character's date of birth");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("A description of the character.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<int?>("Height")
                        .HasColumnType("int")
                        .HasComment("The height of the character, in centimeters.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Age")
                        .HasFilter("[Age] IS NOT NULL");

                    b.HasIndex("DateOfBirth")
                        .HasFilter("[DOB] IS NOT NULL");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("Character", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCharacterVoiceActorMapModel", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("AnimeReleaseId")
                        .HasColumnType("int");

                    b.Property<int>("LocaleId")
                        .HasColumnType("int");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit")
                        .HasComment("Whether this person was the primary voice actor for this character.");

                    b.HasKey("CharacterId", "PersonId", "AnimeReleaseId", "LocaleId");

                    b.HasIndex("AnimeReleaseId");

                    b.HasIndex("LocaleId");

                    b.HasIndex("PersonId");

                    b.ToTable("CharacterVAMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCompanyAnimeMapModel", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId", "AnimeId", "RoleId");

                    b.HasIndex("AnimeId");

                    b.HasIndex("ReleaseId")
                        .HasFilter("[ReleaseId] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("CompanyAnimeMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCompanyGameMapModel", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId", "GameId", "RoleId");

                    b.HasIndex("GameId");

                    b.HasIndex("RoleId");

                    b.ToTable("CompanyGameMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCompanyMangaMapModel", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId", "MangaId", "RoleId");

                    b.HasIndex("MangaId");

                    b.HasIndex("ReleaseId");

                    b.HasIndex("RoleId");

                    b.ToTable("CompanyMangaMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCompanyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("DOB")
                        .HasComment("The date this company was established or founded.");

                    b.Property<string>("CreationLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The location the company was established or founded.");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<string>("Description")
                        .HasMaxLength(1250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1250)")
                        .HasComment("A description of the entity.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<bool>("IsCircle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether the entity represents a circle.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCompanyRelatedMapModel", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedCompanyId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId", "RelatedCompanyId");

                    b.HasIndex("RelatedCompanyId");

                    b.ToTable("CompanyRelatedMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaGenreModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<bool>("IsGore")
                        .HasColumnType("bit")
                        .HasComment("Whether this tag marks an entity as containing gore.");

                    b.Property<bool>("IsNSFW")
                        .HasColumnType("bit")
                        .HasComment("Whether this tag marks an entity as NSFW.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("The name of the genre, for example \"Action\" or \"Fantasy\".");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MediaGenre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "4-Koma"
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "Daily Life"
                        },
                        new
                        {
                            Id = 5,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "High School"
                        },
                        new
                        {
                            Id = 6,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "Manga"
                        },
                        new
                        {
                            Id = 7,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 8,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "School"
                        },
                        new
                        {
                            Id = 9,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "Shounen"
                        },
                        new
                        {
                            Id = 10,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "Shoujo"
                        },
                        new
                        {
                            Id = 11,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 12,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "Mecha"
                        },
                        new
                        {
                            Id = 13,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 14,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 15,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsGore = false,
                            IsNSFW = false,
                            IsSoftDeleted = false,
                            Name = "Magic Girl"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaPersonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("The place this person was born.");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DOB")
                        .HasComment("The person's date of birth.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("A description of the person")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaRelationTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the MediaRelationType enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MediaRelationType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Prequel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sequel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SideStory"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ParentStory"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Recap"
                        },
                        new
                        {
                            Id = 6,
                            Name = "AlternativeSetting"
                        },
                        new
                        {
                            Id = 7,
                            Name = "AlternativeVersion"
                        },
                        new
                        {
                            Id = 8,
                            Name = "MusicVideo"
                        },
                        new
                        {
                            Id = 9,
                            Name = "DLC"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaSeriesAnimeMapModel", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.HasKey("SeriesId", "AnimeId");

                    b.HasIndex("AnimeId");

                    b.ToTable("MediaSeriesAnimeMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaSeriesGameMapModel", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("SeriesId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("MediaSeriesGameMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaSeriesMangaMapModel", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.HasKey("SeriesId", "MangaId");

                    b.HasIndex("MangaId");

                    b.ToTable("MediaSeriesMangaMap", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaSeriesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Synopsis")
                        .HasMaxLength(1250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1250)")
                        .HasComment("A synopsis of the media series.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("MediaSeries", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaStatusTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the MediaStatus enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MediaStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Complete"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Releasing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "InProduction"
                        },
                        new
                        {
                            Id = 4,
                            Name = "NotReleased"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 6,
                            Name = "OnHaitus"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaTagModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("A short description of the tag.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<bool>("IsGore")
                        .HasColumnType("bit")
                        .HasComment("Whether this tag marks an entity as containing gore.");

                    b.Property<bool>("IsNSFW")
                        .HasColumnType("bit")
                        .HasComment("Whether this tag marks an entity as NSFW.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<bool>("IsSpoiler")
                        .HasColumnType("bit")
                        .HasComment("Whether this tag is a spoiler for an event in the media.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComment("The name of the tag.");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("MediaTag", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.PersonRoleTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The name of the PersonRole enum value.");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PersonRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "OriginalCreator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Editor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Director"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Producer"
                        },
                        new
                        {
                            Id = 5,
                            Name = "AnimationDirector"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SoundDirector"
                        },
                        new
                        {
                            Id = 7,
                            Name = "EpisodeDirector"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Storyboard"
                        },
                        new
                        {
                            Id = 9,
                            Name = "ScriptWriter"
                        },
                        new
                        {
                            Id = 10,
                            Name = "CharacterDesign"
                        },
                        new
                        {
                            Id = 11,
                            Name = "OriginalCharacterDesign"
                        },
                        new
                        {
                            Id = 12,
                            Name = "KeyAnimation"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Planning"
                        },
                        new
                        {
                            Id = 14,
                            Name = "ThemeSongPerformance"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Programmer"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.ThirdPartyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was created.");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()")
                        .HasComment("The date the entry was last updated.");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasComment("Whether this entity is soft deleted.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasComment("The name of the third party tracker.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<string>("RomajiName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasComment("The romanized name of the third party tracker.");

                    b.Property<string>("ShortName")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasComment("The short name or alias of the third party tracker.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<string>("Url")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("The URL of the third party tracker's website homepage.");

                    b.HasKey("Id");

                    b.HasIndex("IsSoftDeleted");

                    b.ToTable("ThirdParty", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSoftDeleted = false,
                            Name = "AniDB",
                            Url = "https://anidb.net/"
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSoftDeleted = false,
                            Name = "TheTVDB",
                            Url = "https://www.thetvdb.com/"
                        },
                        new
                        {
                            Id = 3,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSoftDeleted = false,
                            Name = "MyAnimeList",
                            ShortName = "MAL",
                            Url = "https://myanimelist.net/"
                        },
                        new
                        {
                            Id = 4,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSoftDeleted = false,
                            Name = "Anime-Planet",
                            ShortName = "AP",
                            Url = "https://www.anime-planet.com/"
                        },
                        new
                        {
                            Id = 5,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSoftDeleted = false,
                            Name = "AniList",
                            Url = "https://anilist.co/"
                        },
                        new
                        {
                            Id = 6,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSoftDeleted = false,
                            Name = "Anime News Network",
                            ShortName = "ANN",
                            Url = "https://www.animenewsnetwork.com/"
                        },
                        new
                        {
                            Id = 7,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSoftDeleted = false,
                            Name = "AllCinema",
                            Url = "https://www.allcinema.net/"
                        });
                });

            modelBuilder.Entity("AniNexus.Domain.Models.TwitterHashTagModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Hashtag")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)")
                        .HasComment("The Twitter hashtag.")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.HasKey("Id");

                    b.HasIndex("Hashtag")
                        .IsUnique();

                    b.ToTable("TwitterHashTag", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .UseCollation("Japanese_CI_AS_KS_WS");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeCharacterMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany("Characters")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaCharacterModel", "Character")
                        .WithMany("Anime")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.CharacterRoleTypeModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Character");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeEpisodeModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeReleaseModel", "Release")
                        .WithMany("Episodes")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Release");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeFavoriteMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany("Favorites")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeGenreMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany("Genres")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaGenreModel", "Genre")
                        .WithMany("Anime")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeListEntryModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.AnimeListStatusTypeModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeCategoryTypeModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.AnimeSeasonTypeModel", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimePersonRoleMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany("People")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaPersonModel", "Person")
                        .WithMany("AnimeRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.PersonRoleTypeModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeRelatedMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany("Related")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Related")
                        .WithMany()
                        .HasForeignKey("RelatedAnimeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaRelationTypeModel", "RelationType")
                        .WithMany()
                        .HasForeignKey("RelatedAnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Related");

                    b.Navigation("RelationType");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeReleaseAiringModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeReleaseModel", "Release")
                        .WithOne()
                        .HasForeignKey("AniNexus.Domain.Models.AnimeReleaseAiringModel", "ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Release");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeReleaseModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeAgeRatingTypeModel", "AgeRating")
                        .WithMany()
                        .HasForeignKey("AgeRatingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany("Releases")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.LocaleModel", "Locale")
                        .WithMany()
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaStatusTypeModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("AniNexus.Domain.Models.AnimeReleaseModel+NameModel", "Names", b1 =>
                        {
                            b1.Property<int>("AnimeReleaseModelId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("EnglishName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EnglishName")
                                .HasComment("The name in English.");

                            b1.Property<bool>("IsPrimary")
                                .HasColumnType("bit")
                                .HasColumnName("IsPrimary")
                                .HasComment("Whether this name is the primary name of the release.");

                            b1.Property<string>("NativeName")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NativeName")
                                .HasComment("The native name.")
                                .UseCollation("Japanese_CI_AS_KS_WS");

                            b1.Property<string>("RomajiName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("RomajiName")
                                .HasComment("The romanization of the native name.");

                            b1.HasKey("AnimeReleaseModelId", "Id");

                            b1.ToTable("AnimeReleaseName", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AnimeReleaseModelId");
                        });

                    b.OwnsMany("AniNexus.Domain.Models.AnimeReleaseModel+TrailerModel", "Trailers", b1 =>
                        {
                            b1.Property<int>("AnimeReleaseModelId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("ResourceUrl")
                                .IsRequired()
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("ResourceUrl")
                                .HasComment("The URL of the trailer or promotional video.");

                            b1.HasKey("AnimeReleaseModelId", "Id");

                            b1.ToTable("AnimeReleaseTrailer", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AnimeReleaseModelId");
                        });

                    b.Navigation("AgeRating");

                    b.Navigation("Anime");

                    b.Navigation("Locale");

                    b.Navigation("Names");

                    b.Navigation("Status");

                    b.Navigation("Trailers");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeReviewModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany("Reviews")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeReviewVoteModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeReviewModel", "Review")
                        .WithMany("Votes")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeSystemRecommendationModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Recommendation")
                        .WithMany()
                        .HasForeignKey("AnimeRecommendationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeTagMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany("Tags")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaTagModel", "Tag")
                        .WithMany("Anime")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeThirdPartyMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany("ExternalIds")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ThirdPartyModel", "ThirdParty")
                        .WithMany()
                        .HasForeignKey("ThirdPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("ThirdParty");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeTwitterHashTagMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany("TwitterHashtags")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.TwitterHashTagModel", "TwitterHashTag")
                        .WithMany()
                        .HasForeignKey("TwitterHashTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("TwitterHashTag");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeUserRecommendationModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Recommendation")
                        .WithMany()
                        .HasForeignKey("AnimeRecommendationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Recommendation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeUserRecommendationVoteModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeUserRecommendationModel", "Recommendation")
                        .WithMany("Votes")
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recommendation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AuditModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameCharacterMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MediaCharacterModel", "Character")
                        .WithMany("Games")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany("Characters")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.CharacterRoleTypeModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Game");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameFavoriteMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany("Favorites")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameGenreMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany("Genres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaGenreModel", "Genre")
                        .WithMany("Games")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameListEntryModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.GameListStatusTypeModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameCategoryTypeModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaStatusTypeModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("AniNexus.Domain.Models.GameModel+NameModel", "Names", b1 =>
                        {
                            b1.Property<int>("GameModelId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("EnglishName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EnglishName")
                                .HasComment("The name in English.");

                            b1.Property<bool>("IsPrimary")
                                .HasColumnType("bit")
                                .HasColumnName("IsPrimary")
                                .HasComment("Whether this name is the primary name of the release.");

                            b1.Property<int>("LocaleId")
                                .HasColumnType("int");

                            b1.Property<string>("NativeName")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NativeName")
                                .HasComment("The native name.")
                                .UseCollation("Japanese_CI_AS_KS_WS");

                            b1.Property<string>("RomajiName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("RomajiName")
                                .HasComment("The romanization of the native name.");

                            b1.HasKey("GameModelId", "Id");

                            b1.HasIndex("LocaleId");

                            b1.ToTable("GameName", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GameModelId");

                            b1.HasOne("AniNexus.Domain.Models.LocaleModel", "Locale")
                                .WithMany()
                                .HasForeignKey("LocaleId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.Navigation("Locale");
                        });

                    b.OwnsMany("AniNexus.Domain.Models.GameModel+TrailerModel", "Trailers", b1 =>
                        {
                            b1.Property<int>("GameModelId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("ResourceUrl")
                                .IsRequired()
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("ResourceUrl")
                                .HasComment("The URL of the trailer or promotional video.");

                            b1.HasKey("GameModelId", "Id");

                            b1.ToTable("GameTrailer", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GameModelId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Names");

                    b.Navigation("Status");

                    b.Navigation("Trailers");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GamePersonRoleMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany("People")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaPersonModel", "Person")
                        .WithMany("GameRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.PersonRoleTypeModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameRelatedMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany("Related")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.GameModel", "Related")
                        .WithMany()
                        .HasForeignKey("RelatedGameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaRelationTypeModel", "RelationType")
                        .WithMany()
                        .HasForeignKey("RelatedGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Related");

                    b.Navigation("RelationType");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameReviewModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameReviewVoteModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameReviewModel", "Review")
                        .WithMany("Votes")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameSystemRecommendationModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.GameModel", "Recommendation")
                        .WithMany()
                        .HasForeignKey("GameRecommendationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameTagMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany("Tags")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaTagModel", "Tag")
                        .WithMany("Games")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameThirdPartyMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany("ExternalIds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ThirdPartyModel", "ThirdParty")
                        .WithMany()
                        .HasForeignKey("ThirdPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("ThirdParty");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameTwitterHashTagMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany("TwitterHashtags")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.TwitterHashTagModel", "TwitterHashTag")
                        .WithMany()
                        .HasForeignKey("TwitterHashTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("TwitterHashTag");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameUserRecommendationModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.GameModel", "Recommendation")
                        .WithMany()
                        .HasForeignKey("GameRecommendationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Recommendation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameUserRecommendationVoteModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameUserRecommendationModel", "Recommendation")
                        .WithMany("Votes")
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recommendation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaChapterModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaReleaseModel", "Release")
                        .WithMany("Chapters")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MangaVolumeModel", "Volume")
                        .WithMany("Chapters")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("AniNexus.Domain.Models.MangaChapterModel+NameModel", "Name", b1 =>
                        {
                            b1.Property<long>("MangaChapterModelId")
                                .HasColumnType("bigint");

                            b1.Property<string>("EnglishName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EnglishName")
                                .HasComment("The name in English.");

                            b1.Property<string>("NativeName")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NativeName")
                                .HasComment("The native name.")
                                .UseCollation("Japanese_CI_AS_KS_WS");

                            b1.Property<string>("RomajiName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("RomajiName")
                                .HasComment("The romanization of the native name.");

                            b1.HasKey("MangaChapterModelId");

                            b1.ToTable("MangaChapterName", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MangaChapterModelId");
                        });

                    b.Navigation("Name");

                    b.Navigation("Release");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaCharacterMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MediaCharacterModel", "Character")
                        .WithMany("Manga")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany("Characters")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.CharacterRoleTypeModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Manga");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaFavoriteMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany("Favorites")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaGenreMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MediaGenreModel", "Genre")
                        .WithMany("Manga")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany("Genres")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaListEntryModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany()
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MangaListStatusTypeModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaCategoryTypeModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaPersonRoleMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany("People")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaPersonModel", "Person")
                        .WithMany("MangaRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.PersonRoleTypeModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaRelatedMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany("Related")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Related")
                        .WithMany()
                        .HasForeignKey("RelatedMangaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaRelationTypeModel", "RelationType")
                        .WithMany()
                        .HasForeignKey("RelatedMangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Related");

                    b.Navigation("RelationType");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaReleaseModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaAgeRatingTypeModel", "AgeRating")
                        .WithMany()
                        .HasForeignKey("AgeRatingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AniNexus.Domain.Models.LocaleModel", "Locale")
                        .WithMany()
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany("Releases")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaStatusTypeModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("AniNexus.Domain.Models.MangaReleaseModel+NameModel", "Names", b1 =>
                        {
                            b1.Property<int>("MangaReleaseModelId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("EnglishName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EnglishName")
                                .HasComment("The name in English.");

                            b1.Property<bool>("IsPrimary")
                                .HasColumnType("bit")
                                .HasColumnName("IsPrimary")
                                .HasComment("Whether this name is the primary name of the release.");

                            b1.Property<string>("NativeName")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NativeName")
                                .HasComment("The native name.")
                                .UseCollation("Japanese_CI_AS_KS_WS");

                            b1.Property<string>("RomajiName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("RomajiName")
                                .HasComment("The romanization of the native name.");

                            b1.HasKey("MangaReleaseModelId", "Id");

                            b1.ToTable("MangaReleaseName", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MangaReleaseModelId");
                        });

                    b.Navigation("AgeRating");

                    b.Navigation("Locale");

                    b.Navigation("Manga");

                    b.Navigation("Names");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaReviewModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany("Reviews")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaReviewVoteModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaReviewModel", "Review")
                        .WithMany("Votes")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaSystemRecommendationModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany()
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Recommendation")
                        .WithMany()
                        .HasForeignKey("MangaRecommendationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaTagMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany("Tags")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaTagModel", "Tag")
                        .WithMany("Manga")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaThirdPartyMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany("ExternalIds")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ThirdPartyModel", "ThirdParty")
                        .WithMany()
                        .HasForeignKey("ThirdPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("ThirdParty");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaTwitterHashTagMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany("TwitterHashtags")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.TwitterHashTagModel", "TwitterHashTag")
                        .WithMany()
                        .HasForeignKey("TwitterHashTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("TwitterHashTag");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaUserRecommendationModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany()
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Recommendation")
                        .WithMany()
                        .HasForeignKey("MangaRecommendationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Recommendation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaUserRecommendationVoteModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaUserRecommendationModel", "Recommendation")
                        .WithMany("Votes")
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recommendation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaVolumeModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaReleaseModel", "Release")
                        .WithMany("Volumes")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("AniNexus.Domain.Models.MangaVolumeModel+NameModel", "Name", b1 =>
                        {
                            b1.Property<long>("MangaVolumeModelId")
                                .HasColumnType("bigint");

                            b1.Property<string>("EnglishName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EnglishName")
                                .HasComment("The name in English.");

                            b1.Property<bool>("IsPrimary")
                                .HasColumnType("bit")
                                .HasColumnName("IsPrimary")
                                .HasComment("Whether this name is the primary name of the release.");

                            b1.Property<string>("NativeName")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NativeName")
                                .HasComment("The native name.")
                                .UseCollation("Japanese_CI_AS_KS_WS");

                            b1.Property<string>("RomajiName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("RomajiName")
                                .HasComment("The romanization of the native name.");

                            b1.HasKey("MangaVolumeModelId");

                            b1.ToTable("MangaVolumeName", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MangaVolumeModelId");
                        });

                    b.Navigation("Name");

                    b.Navigation("Release");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCharacterActorMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeReleaseModel", "AnimeRelease")
                        .WithMany("LiveActors")
                        .HasForeignKey("AnimeReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaCharacterModel", "Character")
                        .WithMany("LiveActors")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.LocaleModel", "Locale")
                        .WithMany()
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaPersonModel", "Actor")
                        .WithMany("ActedCharacters")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("AnimeRelease");

                    b.Navigation("Character");

                    b.Navigation("Locale");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCharacterModel", b =>
                {
                    b.OwnsMany("AniNexus.Domain.Models.MediaCharacterModel+NameModel", "Names", b1 =>
                        {
                            b1.Property<int>("MediaCharacterModelId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool>("IsPrimary")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsSpoiler")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasComment("Whether this name is a spoiler.");

                            b1.Property<string>("NativeName")
                                .IsRequired()
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasComment("The native name of the character.")
                                .UseCollation("Japanese_CI_AS_KS_WS");

                            b1.Property<string>("RomajiFirstName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasComment("The romanization of the first name.");

                            b1.Property<string>("RomajiLastName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasComment("The romanization of the last name.");

                            b1.Property<string>("RomajiMiddleName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasComment("The romanization of the middle name.");

                            b1.Property<string>("RomajiName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasComment("The romanization of the native name.");

                            b1.HasKey("MediaCharacterModelId", "Id");

                            b1.ToTable("CharacterName", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MediaCharacterModelId");
                        });

                    b.Navigation("Names");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCharacterVoiceActorMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeReleaseModel", "AnimeRelease")
                        .WithMany("VoiceActors")
                        .HasForeignKey("AnimeReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaCharacterModel", "Character")
                        .WithMany("VoiceActors")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.LocaleModel", "Locale")
                        .WithMany()
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaPersonModel", "VoiceActor")
                        .WithMany("VoiceActedCharacters")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnimeRelease");

                    b.Navigation("Character");

                    b.Navigation("Locale");

                    b.Navigation("VoiceActor");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCompanyAnimeMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany("Companies")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaCompanyModel", "Company")
                        .WithMany("AnimeRoles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.AnimeReleaseModel", "Release")
                        .WithMany()
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AniNexus.Domain.Models.CompanyRoleTypeModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Company");

                    b.Navigation("Release");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCompanyGameMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MediaCompanyModel", "Company")
                        .WithMany("GameRoles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany("Companies")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.CompanyRoleTypeModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Game");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCompanyMangaMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MediaCompanyModel", "Company")
                        .WithMany("MangaRoles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany("Companies")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MangaReleaseModel", "Release")
                        .WithMany()
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AniNexus.Domain.Models.CompanyRoleTypeModel", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Manga");

                    b.Navigation("Release");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCompanyModel", b =>
                {
                    b.OwnsMany("AniNexus.Domain.Models.MediaCompanyModel+NameModel", "Names", b1 =>
                        {
                            b1.Property<int>("MediaCompanyModelId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool>("IsPrimary")
                                .HasColumnType("bit")
                                .HasColumnName("IsPrimary")
                                .HasComment("Whether this name is the primary name.");

                            b1.Property<string>("NativeName")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NativeName")
                                .HasComment("The native name.")
                                .UseCollation("Japanese_CI_AS_KS_WS");

                            b1.Property<string>("RomajiName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("RomajiName")
                                .HasComment("The romanization of the native name.");

                            b1.HasKey("MediaCompanyModelId", "Id");

                            b1.ToTable("CompanyName", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MediaCompanyModelId");
                        });

                    b.Navigation("Names");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCompanyRelatedMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MediaCompanyModel", "Company")
                        .WithMany("RelatedCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaCompanyModel", "RelatedCompany")
                        .WithMany()
                        .HasForeignKey("RelatedCompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("RelatedCompany");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaPersonModel", b =>
                {
                    b.OwnsMany("AniNexus.Domain.Models.MediaPersonModel+NameModel", "Names", b1 =>
                        {
                            b1.Property<int>("MediaPersonModelId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool>("IsPrimary")
                                .HasColumnType("bit")
                                .HasColumnName("IsPrimary")
                                .HasComment("Whether this name is the primary name of the release.");

                            b1.Property<string>("NativeName")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NativeName")
                                .HasComment("The native name.")
                                .UseCollation("Japanese_CI_AS_KS_WS");

                            b1.Property<string>("RomajiFirstName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("RomajiFirstName")
                                .HasComment("The romanization of the first name.");

                            b1.Property<string>("RomajiLastName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("RomajiLastName")
                                .HasComment("The romanization of the last name.");

                            b1.Property<string>("RomajiMiddleName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("RomajiMiddleName")
                                .HasComment("The romanization of the middle name.");

                            b1.Property<string>("RomajiName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("RomajiName")
                                .HasComment("The romanization of the native name.");

                            b1.HasKey("MediaPersonModelId", "Id");

                            b1.ToTable("PersonName", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MediaPersonModelId");
                        });

                    b.Navigation("Names");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaSeriesAnimeMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.AnimeModel", "Anime")
                        .WithMany("Series")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaSeriesModel", "Series")
                        .WithMany("Anime")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaSeriesGameMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.GameModel", "Game")
                        .WithMany("Series")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaSeriesModel", "Series")
                        .WithMany("Games")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaSeriesMangaMapModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.MangaModel", "Manga")
                        .WithMany("Series")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.MediaSeriesModel", "Series")
                        .WithMany("Manga")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaSeriesModel", b =>
                {
                    b.OwnsMany("AniNexus.Domain.Models.MediaSeriesModel+NameModel", "Names", b1 =>
                        {
                            b1.Property<int>("MediaSeriesModelId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("EnglishName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EnglishName")
                                .HasComment("The name in English.");

                            b1.Property<bool>("IsPrimary")
                                .HasColumnType("bit")
                                .HasColumnName("IsPrimary")
                                .HasComment("Whether this name is the primary name of the series.");

                            b1.Property<string>("NativeName")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NativeName")
                                .HasComment("The native name.")
                                .UseCollation("Japanese_CI_AS_KS_WS");

                            b1.Property<string>("RomajiName")
                                .IsUnicode(false)
                                .HasColumnType("varchar(max)")
                                .HasColumnName("RomajiName")
                                .HasComment("The romanization of the native name.");

                            b1.HasKey("MediaSeriesModelId", "Id");

                            b1.ToTable("MediaSeriesName", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MediaSeriesModelId");
                        });

                    b.Navigation("Names");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaTagModel", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AniNexus.Domain.Models.ApplicationUserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeModel", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Companies");

                    b.Navigation("ExternalIds");

                    b.Navigation("Favorites");

                    b.Navigation("Genres");

                    b.Navigation("People");

                    b.Navigation("Related");

                    b.Navigation("Releases");

                    b.Navigation("Reviews");

                    b.Navigation("Series");

                    b.Navigation("Tags");

                    b.Navigation("TwitterHashtags");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeReleaseModel", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("LiveActors");

                    b.Navigation("VoiceActors");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeReviewModel", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.AnimeUserRecommendationModel", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameModel", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Companies");

                    b.Navigation("ExternalIds");

                    b.Navigation("Favorites");

                    b.Navigation("Genres");

                    b.Navigation("People");

                    b.Navigation("Related");

                    b.Navigation("Reviews");

                    b.Navigation("Series");

                    b.Navigation("Tags");

                    b.Navigation("TwitterHashtags");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameReviewModel", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.GameUserRecommendationModel", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaModel", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Companies");

                    b.Navigation("ExternalIds");

                    b.Navigation("Favorites");

                    b.Navigation("Genres");

                    b.Navigation("People");

                    b.Navigation("Related");

                    b.Navigation("Releases");

                    b.Navigation("Reviews");

                    b.Navigation("Series");

                    b.Navigation("Tags");

                    b.Navigation("TwitterHashtags");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaReleaseModel", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Volumes");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaReviewModel", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaUserRecommendationModel", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MangaVolumeModel", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCharacterModel", b =>
                {
                    b.Navigation("Anime");

                    b.Navigation("Games");

                    b.Navigation("LiveActors");

                    b.Navigation("Manga");

                    b.Navigation("VoiceActors");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaCompanyModel", b =>
                {
                    b.Navigation("AnimeRoles");

                    b.Navigation("GameRoles");

                    b.Navigation("MangaRoles");

                    b.Navigation("RelatedCompanies");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaGenreModel", b =>
                {
                    b.Navigation("Anime");

                    b.Navigation("Games");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaPersonModel", b =>
                {
                    b.Navigation("ActedCharacters");

                    b.Navigation("AnimeRoles");

                    b.Navigation("GameRoles");

                    b.Navigation("MangaRoles");

                    b.Navigation("VoiceActedCharacters");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaSeriesModel", b =>
                {
                    b.Navigation("Anime");

                    b.Navigation("Games");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("AniNexus.Domain.Models.MediaTagModel", b =>
                {
                    b.Navigation("Anime");

                    b.Navigation("Games");

                    b.Navigation("Manga");
                });
#pragma warning restore 612, 618
        }
    }
}
