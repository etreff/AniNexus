@page "/account"
@using AniNexus.Models.User

<h3>Login</h3>

<Field>
	<Addons>
		<Addon AddonType="AddonType.Start">
			<AddonLabel><Icon Name="IconName.User"></Icon></AddonLabel>
		</Addon>
		<Addon AddonType="AddonType.Body">
			<TextEdit @bind-Text="@LoginModel.Username" MaxLength="16" Placeholder="Username" Size="Size.Large" />
		</Addon>
	</Addons>
</Field>
<Field>
	<Addons>
		<Addon AddonType="AddonType.Start">
			<AddonLabel><Icon Name="IconName.Key"></Icon></AddonLabel>
		</Addon>
		<Addon AddonType="AddonType.Body">
			@*Need to specify ChangeTextOnKeyPress="true" since we have the option to hit enter.
			  This will send the model without the password being flushed to the data model.*@
			<TextEdit @bind-Text="@LoginModel.Password" Role="TextRole.Password" Placeholder="Password" Size="Size.Large" KeyPress="@OnKeyPressedInPasswordAsync"
					  ChangeTextOnKeyPress="true" />
		</Addon>
	</Addons>
</Field>

<Button Loading="@LoginButtonDisabled" Color="Color.Primary" Clicked="@Submit" Disabled="@LoginButtonDisabled">@(LoginButtonDisabled ? null : "Login")</Button>

<MFACodeCollector @ref="MFAModal" CodeCollected="SubmitWithMFAAsync" />
<ErrorModal @ref="ErrorModal" />

@code {

	[Inject]
	private IAuthenticationService AuthenticationService { get; set; } = default!;

	[Inject]
	private JSConsoleLogger ConsoleLogger { get; set; } = default!;

	[Inject]
	private NavigationManager Navigation { get; set; } = default!;

	private ErrorModal ErrorModal = default!;
	private MFACodeCollector MFAModal = default!;
	private LoginRequestDTO LoginModel = new LoginRequestDTO();
	private bool LoginButtonDisabled;

	private async Task Submit()
	{
		bool loggedIn = false;
		try
		{
			LoginButtonDisabled = true;
			var authenticationResult = await AuthenticationService.Authenticate(LoginModel);

			if (authenticationResult.Code == ELoginResult.MFACodeRequired)
			{
				await MFAModal.ShowAsync();
				return;
			}

			if (authenticationResult.Code != ELoginResult.Success)
			{
				await ConsoleLogger.Error(authenticationResult.Message);
				ErrorModal.Show("Login Failed", authenticationResult.Message);

				LoginModel.TwoFactorCode = null;

				return;
			}

			await authenticationResult.Commit();
			loggedIn = true;

			Navigation.NavigateTo("", false, true);
		}
		catch (Exception e)
		{
			await ConsoleLogger.Error(e.Message);
		}
		finally
		{
			LoginButtonDisabled = loggedIn;
		}
	}

	private async Task SubmitWithMFAAsync(string code)
	{
		await ConsoleLogger.Info($"Submitting MFA code {code}");

		LoginModel.TwoFactorCode = code;
		
		await MFAModal.CloseAsync();
		await Submit();
	}

	private async Task OnKeyPressedInPasswordAsync(KeyboardEventArgs e)
	{
		// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
		if (e.Key == "Enter" && !e.AltKey && !e.CtrlKey)
		{
			await Submit();
		}
	}
}