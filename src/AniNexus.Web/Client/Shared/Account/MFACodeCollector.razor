<Modal @ref="MFAModal">
	<ModalContent Centered="true">
		<ModalHeader>
			<ModalTitle>Multi-Factor Authentication</ModalTitle>
			<CloseButton />
		</ModalHeader>
		<ModalBody>
			<Fields>
				@for (int i = 0; i < Digits; ++i)
				{
					var curr = i;
					var next = i + 1;
					<Field>
						<NumericEdit TValue="byte?" @ref="MFAModalInput" Min="0" Max="9" Decimals="0" EnableStep="false" ShowStepButtons="false"
								 KeyDown="@(async (e) => await SetInputAsync(curr, e.Code))"
								 ValueChanged="@(async () => await OnValueChangedAsync(curr, next))"
								 Style="text-align:center;color:transparent;text-shadow:0 0 0 #495057"
								 ChangeTextOnKeyPress="true"/>
					</Field>
				}
			</Fields>
		</ModalBody>
	</ModalContent>
</Modal>

@code {

	[Parameter]
	public int Digits { get; set; } = 6;

	[Parameter]
	public EventCallback<string> CodeCollected { get; set; }

	[Inject]
	private JSConsoleLogger ConsoleLogger { get; set; } = default!;

	private Modal MFAModal = default!;
	private List<NumericEdit<byte?>> MFAModalInputs = new List<NumericEdit<byte?>>(6);
	private NumericEdit<byte?> MFAModalInput { set => MFAModalInputs.Add(value); }
	private byte? KeyCode;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (Digits < 1)
		{
			throw new ArgumentOutOfRangeException(nameof(Digits), "Value must be greater than 0.");
		}
	}

	public async Task ShowAsync()
	{
		MFAModal.Show();

		await ClearAsync();
		await SetFocusAsync(0);
	}

	public Task CloseAsync()
	{
		return MFAModal.Close(CloseReason.None);
	}

	private async Task SetInputAsync(int current, string keyCode)
	{
		if (keyCode.StartsWith("Digit", StringComparison.OrdinalIgnoreCase) && byte.TryParse(keyCode.Substring(5), out byte num))
		{
			KeyCode = num;
		}

		if (keyCode.Equals("Backspace"))
		{
			KeyCode = null;
			await SetValueAsync(current, null);
			await SetFocusAsync(current - 1);
		}
	}

	private async Task OnValueChangedAsync(int current, int target)
	{
		// Only want to fix up input if we are going forward.
		// Backspacing doesn't want to apply this logic.
		if (current < target)
		{
			await SetValueAsync(current, KeyCode);
		}

		// This was a backspace event. We don't want to move forward.
		if (!KeyCode.HasValue)
		{
			return;
		}

		await SetFocusAsync(target);

		if (MFAModalInputs.All(i => i.Value.HasValue) && CodeCollected.HasDelegate)
		{
			KeyCode = null;
			string code = string.Join(null, MFAModalInputs.Select(i => i.Value));
			await ClearAsync();

			await CodeCollected.InvokeAsync(code);
		}

		if (target == MFAModalInputs.Count)
		{
			for (int i = 0; i < MFAModalInputs.Count; ++i)
			{
				if (MFAModalInputs[i].Value is null)
				{
					await SetFocusAsync(i);
					break;
				}
			}
		}
	}

	private async Task ClearAsync()
	{
		KeyCode = null;
		foreach (var element in MFAModalInputs)
		{
			await SetValueAsync(element, null);
		}
	}

	private Task SetFocusAsync(int index)
	{
		if (0 <= index && index < MFAModalInputs.Count)
		{
			return MFAModalInputs[index].FocusAsync();
		}
		return Task.CompletedTask;
	}

	private Task SetValueAsync(int index, byte? value)
	{
		if (0 <= index && index < MFAModalInputs.Count)
		{
			return SetValueAsync(MFAModalInputs[index], value);
		}
		return Task.CompletedTask;
	}

	private Task SetValueAsync(NumericEdit<byte?> element, byte? value)
	{
		return element.SetValue(value.HasValue ? value.Value.ToString() : null);
	}
}